const { Client, Intents } = require("discord.js");
const config = require("./config.js");
const fs = require("fs");
const path = require('path');
const { printWatermark } = require('./util/pw');
const { initializePlayer } = require('./player');

const client = new Client({
    intents: [
        Intents.FLAGS.GUILDS,
        Intents.FLAGS.GUILD_MESSAGES,
        Intents.FLAGS.GUILD_VOICE_STATES,
    ],
});

client.config = config;
initializePlayer(client);

client.on("ready", () => {
    console.log(`Logged in as ${client.user.tag}`);
    client.user.setActivity("Music", { type: "PLAYING" });
});

// Register slash commands
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v9');

const commands = [];
const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const command = require(`./commands/${file}`);
    commands.push(command.data.toJSON());
}

const rest = new REST({ version: '9' }).setToken(config.TOKEN);

(async () => {
    try {
        console.log('Started refreshing application (/) commands.');

        await rest.put(
            Routes.applicationGuildCommands(config.CLIENT_ID, config.GUILD_ID),
            { body: commands },
        );

        console.log('Successfully reloaded application (/) commands.');
    } catch (error) {
        console.error(error);
    }
})();

// Handle interactions
client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;

    const { commandName, options } = interaction;

    if (commandName === 'play') {
        await interaction.deferReply();

        const url = options.getString('url');
        // Implement logic to play music from URL
        // Example: client.player.play(interaction.guild, url);

        await interaction.editReply(`Now playing: ${url}`);
    } else if (commandName === 'skip') {
        // Implement logic to skip current track
        // Example: client.player.skip(interaction.guild);

        await interaction.reply('Skipped to next track.');
    } else if (commandName === 'stop') {
        // Implement logic to stop playing
        // Example: client.player.stop(interaction.guild);

        await interaction.reply('Stopped playback.');
    } else if (commandName === 'pause') {
        // Implement logic to pause playback
        // Example: client.player.pause(interaction.guild);

        await interaction.reply('Paused playback.');
    } else if (commandName === 'resume') {
        // Implement logic to resume playback
        // Example: client.player.resume(interaction.guild);

        await interaction.reply('Resumed playback.');
    } else if (commandName === 'playlist-create') {
        const name = options.getString('name');
        // Implement logic to create a playlist with name
        // Example: client.player.createPlaylist(interaction.guild, name);

        await interaction.reply(`Created playlist: ${name}`);
    } else if (commandName === 'playlist-play') {
        const name = options.getString('name');
        // Implement logic to play a playlist by name
        // Example: client.player.playPlaylist(interaction.guild, name);

        await interaction.reply(`Playing playlist: ${name}`);
    } else if (commandName === 'like-song') {
        const url = options.getString('url');
        // Implement logic to like a song by URL
        // Example: client.player.likeSong(interaction.guild, url);

        await interaction.reply(`Liked song: ${url}`);
    } else if (commandName === 'volume') {
        const volume = options.getNumber('level');
        // Implement logic to set volume
        // Example: client.player.setVolume(interaction.guild, volume);

        await interaction.reply(`Set volume to: ${volume}`);
    }
});

client.login(config.TOKEN);

// Express web server
const express = require("express");
const app = express();
const port = 3000;

app.get('/', (req, res) => {
    const indexPath = path.join(__dirname, 'index.html');
    res.sendFile(indexPath);
});

app.listen(port, () => {
    console.log(`ðŸ”— Listening at http://localhost:${port}`);
});

printWatermark();
